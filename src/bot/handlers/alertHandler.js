const { Markup } = require('telegraf');
const alertService = require('../../services/AlertService');
const logger = require('../../utils/logger');

async function handleAlertCommands(bot) {
  bot.command('setalert', async (ctx) => {
    try {
      const [_, chain, symbol, type, price, repeat] = ctx.message.text.split(' ');

      if (!chain || !symbol || !type || !price) {
        return ctx.reply(
          'LÃ¼tfen tÃ¼m parametreleri girin.\n' +
          'Ã–rnek: /setalert SOLANA SOL/USDT ABOVE 25.5 [REPEAT]'
        );
      }

      const alertData = {
        chain: chain.toUpperCase(),
        symbol: symbol.toUpperCase(),
        type: type.toUpperCase(),
        price: parseFloat(price),
        repeat: repeat?.toUpperCase() === 'REPEAT'
      };

      const errors = alertService.validateAlertData(alertData);
      if (errors.length > 0) {
        return ctx.reply(`Hata(lar):\n${errors.join('\n')}`);
      }

      const alert = await alertService.createAlert(ctx.from.id, alertData);
      ctx.reply(
        `Fiyat alarmÄ± oluÅŸturuldu!\n\n` +
        `ğŸ”¹ Zincir: ${alert.chain}\n` +
        `ğŸ”¹ Sembol: ${alert.symbol}\n` +
        `ğŸ”¹ KoÅŸul: Fiyat ${alert.type === 'ABOVE' ? 'Ã¼zerine Ã§Ä±ktÄ±ÄŸÄ±nda' : 'altÄ±na dÃ¼ÅŸtÃ¼ÄŸÃ¼nde'}\n` +
        `ğŸ”¹ Fiyat: ${alert.price}\n` +
        `ğŸ”¹ Tekrar: ${alert.repeat ? 'Evet' : 'HayÄ±r'}`
      );
    } catch (error) {
      logger.error(`Alarm oluÅŸturma hatasÄ±: ${error.message}`);
      ctx.reply('Alarm oluÅŸturulurken bir hata oluÅŸtu. LÃ¼tfen daha sonra tekrar deneyin.');
    }
  });
  bot.command('alerts', async (ctx) => {
    try {
      const alerts = await alertService.getActiveAlerts(ctx.from.id);
      
      if (alerts.length === 0) {
        return ctx.reply('Aktif alarmÄ±nÄ±z bulunmuyor.');
      }

      let message = 'ğŸ“‹ Aktif AlarmlarÄ±nÄ±z:\n\n';
      alerts.forEach((alert, index) => {
        message += `${index + 1}. Alarm\n`;
        message += `ğŸ”¹ ID: ${alert._id}\n`;
        message += `ğŸ”¹ Zincir: ${alert.chain}\n`;
        message += `ğŸ”¹ Sembol: ${alert.symbol}\n`;
        message += `ğŸ”¹ KoÅŸul: Fiyat ${alert.type === 'ABOVE' ? 'Ã¼zerine Ã§Ä±ktÄ±ÄŸÄ±nda' : 'altÄ±na dÃ¼ÅŸtÃ¼ÄŸÃ¼nde'}\n`;
        message += `ğŸ”¹ Fiyat: ${alert.price}\n`;
        message += `ğŸ”¹ Tekrar: ${alert.repeat ? 'Evet' : 'HayÄ±r'}\n`;
        if (alert.lastTriggered) {
          message += `ğŸ”¹ Son Tetiklenme: ${new Date(alert.lastTriggered).toLocaleString('tr-TR')}\n`;
        }
        message += '\n';
      });

      ctx.reply(message);
    } catch (error) {
      logger.error(`Alarm listesi alma hatasÄ±: ${error.message}`);
      ctx.reply('Alarmlar alÄ±nÄ±rken bir hata oluÅŸtu. LÃ¼tfen daha sonra tekrar deneyin.');
    }
  });
  bot.command('delalert', async (ctx) => {
    try {
      const alertId = ctx.message.text.split(' ')[1];

      if (!alertId) {
        return ctx.reply('LÃ¼tfen silinecek alarmÄ±n ID\'sini girin. Ã–rnek: /delalert <alarm_id>');
      }

      const alert = await alertService.deleteAlert(ctx.from.id, alertId);
      ctx.reply(
        `Alarm baÅŸarÄ±yla silindi!\n\n` +
        `ğŸ”¹ Zincir: ${alert.chain}\n` +
        `ğŸ”¹ Sembol: ${alert.symbol}\n` +
        `ğŸ”¹ Fiyat: ${alert.price}`
      );
    } catch (error) {
      logger.error(`Alarm silme hatasÄ±: ${error.message}`);
      ctx.reply('Alarm silinirken bir hata oluÅŸtu: ' + error.message);
    }
  });
  bot.command('allalerts', async (ctx) => {
    try {
      const alerts = await alertService.getAlerts(ctx.from.id);
      
      if (alerts.length === 0) {
        return ctx.reply('HiÃ§ alarmÄ±nÄ±z bulunmuyor.');
      }

      let message = 'ğŸ“‹ TÃ¼m AlarmlarÄ±nÄ±z:\n\n';
      alerts.forEach((alert, index) => {
        message += `${index + 1}. Alarm\n`;
        message += `ğŸ”¹ ID: ${alert._id}\n`;
        message += `ğŸ”¹ Zincir: ${alert.chain}\n`;
        message += `ğŸ”¹ Sembol: ${alert.symbol}\n`;
        message += `ğŸ”¹ KoÅŸul: Fiyat ${alert.type === 'ABOVE' ? 'Ã¼zerine Ã§Ä±ktÄ±ÄŸÄ±nda' : 'altÄ±na dÃ¼ÅŸtÃ¼ÄŸÃ¼nde'}\n`;
        message += `ğŸ”¹ Fiyat: ${alert.price}\n`;
        message += `ğŸ”¹ Durum: ${alert.status}\n`;
        message += `ğŸ”¹ Tekrar: ${alert.repeat ? 'Evet' : 'HayÄ±r'}\n`;
        if (alert.lastTriggered) {
          message += `ğŸ”¹ Son Tetiklenme: ${new Date(alert.lastTriggered).toLocaleString('tr-TR')}\n`;
        }
        message += '\n';
      });

      ctx.reply(message);
    } catch (error) {
      logger.error(`TÃ¼m alarm listesi alma hatasÄ±: ${error.message}`);
      ctx.reply('Alarmlar alÄ±nÄ±rken bir hata oluÅŸtu. LÃ¼tfen daha sonra tekrar deneyin.');
    }
  });
}

module.exports = handleAlertCommands; 